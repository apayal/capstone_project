{
  
    
        "post0": {
            "title": "Title",
            "content": "import pandas as pd import numpy as np import matplotlib.pyplot as plt import seaborn as sns . credit_df=pd.read_csv(r&#39;C: Users Robin Downloads capstone_project _data taiwan_data_categorical.csv&#39;) . credit_df . ID LIMIT_BAL SEX EDUCATION MARRIAGE AGE PAY_0 PAY_2 PAY_3 PAY_4 ... BILL_AMT4 BILL_AMT5 BILL_AMT6 PAY_AMT1 PAY_AMT2 PAY_AMT3 PAY_AMT4 PAY_AMT5 PAY_AMT6 default payment next month . 0 1 | 20000 | Female | University Graduate | Married | 24 | 2 | 2 | -1 | -1 | ... | 0 | 0 | 0 | 0 | 689 | 0 | 0 | 0 | 0 | 1 | . 1 2 | 120000 | Female | University Graduate | Single | 26 | -1 | 2 | 0 | 0 | ... | 3272 | 3455 | 3261 | 0 | 1000 | 1000 | 1000 | 0 | 2000 | 1 | . 2 3 | 90000 | Female | University Graduate | Single | 34 | 0 | 0 | 0 | 0 | ... | 14331 | 14948 | 15549 | 1518 | 1500 | 1000 | 1000 | 1000 | 5000 | 0 | . 3 4 | 50000 | Female | University Graduate | Married | 37 | 0 | 0 | 0 | 0 | ... | 28314 | 28959 | 29547 | 2000 | 2019 | 1200 | 1100 | 1069 | 1000 | 0 | . 4 5 | 50000 | Male | University Graduate | Married | 57 | -1 | 0 | -1 | 0 | ... | 20940 | 19146 | 19131 | 2000 | 36681 | 10000 | 9000 | 689 | 679 | 0 | . ... ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | . 29995 29996 | 220000 | Male | High School | Married | 39 | 0 | 0 | 0 | 0 | ... | 88004 | 31237 | 15980 | 8500 | 20000 | 5003 | 3047 | 5000 | 1000 | 0 | . 29996 29997 | 150000 | Male | High School | Single | 43 | -1 | -1 | -1 | -1 | ... | 8979 | 5190 | 0 | 1837 | 3526 | 8998 | 129 | 0 | 0 | 0 | . 29997 29998 | 30000 | Male | University Graduate | Single | 37 | 4 | 3 | 2 | -1 | ... | 20878 | 20582 | 19357 | 0 | 0 | 22000 | 4200 | 2000 | 3100 | 1 | . 29998 29999 | 80000 | Male | High School | Married | 41 | 1 | -1 | 0 | 0 | ... | 52774 | 11855 | 48944 | 85900 | 3409 | 1178 | 1926 | 52964 | 1804 | 1 | . 29999 30000 | 50000 | Male | University Graduate | Married | 46 | 0 | 0 | 0 | 0 | ... | 36535 | 32428 | 15313 | 2078 | 1800 | 1430 | 1000 | 1000 | 1000 | 1 | . 30000 rows × 25 columns . sns.histplot(credit_df[&#39;SEX&#39;]) . &lt;AxesSubplot:xlabel=&#39;SEX&#39;, ylabel=&#39;Count&#39;&gt; . sns.countplot(credit_df[&#39;SEX&#39;],palette=&quot;Set2&quot;) . C: Users Robin anaconda3 lib site-packages seaborn _decorators.py:36: FutureWarning: Pass the following variable as a keyword arg: x. From version 0.12, the only valid positional argument will be `data`, and passing other arguments without an explicit keyword will result in an error or misinterpretation. warnings.warn( . &lt;AxesSubplot:xlabel=&#39;SEX&#39;, ylabel=&#39;count&#39;&gt; . sns.countplot(credit_df[&#39;MARRIAGE&#39;],palette=&quot;Set2&quot;) . C: Users Robin anaconda3 lib site-packages seaborn _decorators.py:36: FutureWarning: Pass the following variable as a keyword arg: x. From version 0.12, the only valid positional argument will be `data`, and passing other arguments without an explicit keyword will result in an error or misinterpretation. warnings.warn( . &lt;AxesSubplot:xlabel=&#39;MARRIAGE&#39;, ylabel=&#39;count&#39;&gt; . education_percentage=credit_df[&#39;EDUCATION&#39;].value_counts(normalize=True)*100 . education_percentage.index . Index([&#39;University Graduate&#39;, &#39;Graduate school&#39;, &#39;High school&#39;, &#39;Unknown&#39;, &#39;other&#39;, &#39;not known&#39;, &#39;not known 1&#39;], dtype=&#39;object&#39;) . plt.figure(figsize=(12,7)) sns.barplot(x=education_percentage.index,y=education_percentage.values,palette=&#39;muted&#39;) plt.ylabel(&#39;Percentage&#39;) plt.title(&#39;Percentage of Education&#39;) plt.xlabel(&#39;Education&#39;) plt.show() . education_percentage.plot(kind=&#39;bar&#39;) . &lt;AxesSubplot:&gt; . credit_df[&#39;EDUCATION&#39;].value_counts() . University Graduate 14030 Graduate school 10585 High school 4917 Unknown 280 other institutions 123 Not recognised 51 Not recognised 1 14 Name: EDUCATION, dtype: int64 . # Marriage, Age, and Sex def boxplot_variation(feature1, feature2, feature3, width=16): fig, ax1 = plt.subplots(ncols=1, figsize=(width, 6)) s = sns.boxplot(ax=ax1, x=feature1, y=feature2, hue=feature3, data=credit_df, palette=&#39;pastel&#39;) #s.set_xticklabels(s.get_xticklabels(), rotation=90) plt.show(); boxplot_variation(&#39;MARRIAGE&#39;, &#39;AGE&#39;, &#39;SEX&#39;,10) . credit_df[&#39;LIMIT_BAL&#39;].value_counts() . 50000 3365 20000 1976 30000 1610 80000 1567 200000 1528 ... 730000 2 1000000 1 327680 1 760000 1 690000 1 Name: LIMIT_BAL, Length: 81, dtype: int64 . plt.figure(figsize = (14,6)) plt.title(&#39;Amount of credit limit &#39;) sns.histplot(credit_df[&#39;LIMIT_BAL&#39;],bins=40) plt.show() . plt.figure(figsize = (14,6)) plt.title(&#39;Amount of credit limit - Density Plot&#39;) sns.set_color_codes(&quot;pastel&quot;) sns.distplot(credit_df[&#39;LIMIT_BAL&#39;],kde=True,bins=200) plt.show() . C: Users Robin anaconda3 lib site-packages seaborn distributions.py:2619: FutureWarning: `distplot` is a deprecated function and will be removed in a future version. Please adapt your code to use either `displot` (a figure-level function with similar flexibility) or `histplot` (an axes-level function for histograms). warnings.warn(msg, FutureWarning) .",
            "url": "https://apayal.github.io/capstone_project/2022/07/24/same.html",
            "relUrl": "/2022/07/24/same.html",
            "date": " • Jul 24, 2022"
        }
        
    
  
    
        ,"post1": {
            "title": "EDA",
            "content": "import pandas as pd import numpy as np import matplotlib.pyplot as plt import seaborn as sns . pd.__version__ . &#39;1.4.2&#39; . np.__version__ . &#39;1.21.5&#39; . credit_df=pd.read_csv(r&#39;C: Users Robin Downloads capstone_project _data taiwan_data.csv&#39;) . credit_df.shape . (30000, 25) . We have 30,000 rows and 25 columns. Lets take a closer look the dataset, by first taking a snapshot of the what the data looks like. . credit_df.head() . ID LIMIT_BAL SEX EDUCATION MARRIAGE AGE PAY_0 PAY_2 PAY_3 PAY_4 ... BILL_AMT4 BILL_AMT5 BILL_AMT6 PAY_AMT1 PAY_AMT2 PAY_AMT3 PAY_AMT4 PAY_AMT5 PAY_AMT6 default payment next month . 0 1 | 20000 | 2 | 2 | 1 | 24 | 2 | 2 | -1 | -1 | ... | 0 | 0 | 0 | 0 | 689 | 0 | 0 | 0 | 0 | 1 | . 1 2 | 120000 | 2 | 2 | 2 | 26 | -1 | 2 | 0 | 0 | ... | 3272 | 3455 | 3261 | 0 | 1000 | 1000 | 1000 | 0 | 2000 | 1 | . 2 3 | 90000 | 2 | 2 | 2 | 34 | 0 | 0 | 0 | 0 | ... | 14331 | 14948 | 15549 | 1518 | 1500 | 1000 | 1000 | 1000 | 5000 | 0 | . 3 4 | 50000 | 2 | 2 | 1 | 37 | 0 | 0 | 0 | 0 | ... | 28314 | 28959 | 29547 | 2000 | 2019 | 1200 | 1100 | 1069 | 1000 | 0 | . 4 5 | 50000 | 1 | 2 | 1 | 57 | -1 | 0 | -1 | 0 | ... | 20940 | 19146 | 19131 | 2000 | 36681 | 10000 | 9000 | 689 | 679 | 0 | . 5 rows × 25 columns . Data Dictionary . &#39;ID&#39;: ID of each client | LIMIT_BAL: Amount of given credit in NT dollars (includes individual and family/supplementary credit | SEX: Gender (1=male, 2=female) | EDUCATION: (1=graduate school, 2=university, 3=high school, 4=others, 5=unknown, 6=unknown) | MARRIAGE: Marital status (1=married, 2=single, 3=others) | AGE: Age in years | PAY_0: Repayment status in September, 2005 (-1=pay duly, 1=payment delay for one month, 2=payment delay for two months, … 8=payment delay for eight months, 9=payment delay for nine months and above) | PAY_2: Repayment status in August, 2005 (scale same as above) | PAY_3: Repayment status in July, 2005 (scale same as above) | PAY_4: Repayment status in June, 2005 (scale same as above) | PAY_5: Repayment status in May, 2005 (scale same as above) | PAY_6: Repayment status in April, 2005 (scale same as above) | BILL_AMT1: Amount of bill statement in September, 2005 (NT dollar) | BILL_AMT2: Amount of bill statement in August, 2005 (NT dollar) | BILL_AMT3: Amount of bill statement in July, 2005 (NT dollar) | BILL_AMT4: Amount of bill statement in June, 2005 (-NT dollar) | BILL_AMT5: Amount of bill statement in May, 2005 (NT dollar) | BILL_AMT6: Amount of bill statement in April, 2005 (NT dollar) | PAY_AMT1: Amount of previous payment in September, 2005 (NT dollar) | PAY_AMT2: Amount of previous payment in August, 2005 (NT dollar) | PAY_AMT3: Amount of previous payment in July, 2005 (NT dollar) | PAY_AMT4: Amount of previous payment in June, 2005 (NT dollar) | PAY_AMT5: Amount of previous payment in May, 2005 (NT dollar) | PAY_AMT6: Amount of previous payment in April, 2005 (NT dollar) | default.payment.next.month: Default payment (1=yes, 0=no)_ | . Data cleaning and preprocessing . credit_df.isna().sum() . ID 0 LIMIT_BAL 0 SEX 0 EDUCATION 0 MARRIAGE 0 AGE 0 PAY_0 0 PAY_2 0 PAY_3 0 PAY_4 0 PAY_5 0 PAY_6 0 BILL_AMT1 0 BILL_AMT2 0 BILL_AMT3 0 BILL_AMT4 0 BILL_AMT5 0 BILL_AMT6 0 PAY_AMT1 0 PAY_AMT2 0 PAY_AMT3 0 PAY_AMT4 0 PAY_AMT5 0 PAY_AMT6 0 default payment next month 0 dtype: int64 . credit_df.duplicated().sum() . 0 . pd.DataFrame(credit_df.columns) #looking at columns names to check all the column names are appropriate . 0 . 0 ID | . 1 LIMIT_BAL | . 2 SEX | . 3 EDUCATION | . 4 MARRIAGE | . 5 AGE | . 6 PAY_0 | . 7 PAY_2 | . 8 PAY_3 | . 9 PAY_4 | . 10 PAY_5 | . 11 PAY_6 | . 12 BILL_AMT1 | . 13 BILL_AMT2 | . 14 BILL_AMT3 | . 15 BILL_AMT4 | . 16 BILL_AMT5 | . 17 BILL_AMT6 | . 18 PAY_AMT1 | . 19 PAY_AMT2 | . 20 PAY_AMT3 | . 21 PAY_AMT4 | . 22 PAY_AMT5 | . 23 PAY_AMT6 | . 24 default payment next month | . The sixth column PAY_X starts at PAY_0 but then skips to PAY_2. Looking at the other columns in a group such as BILL_AMT and PAY_AMT they all start at 0 and go up to 6. So we need to rename the column PAY_0 as PAY_1 so it has the same count as the other columns and avoid confusion. . Default payment next month is the target column i.e the one we want to predict. This column name should also be changed for easier access,reference and most importantly so it follows the same uniform naming convention as the other columns - 1 or 2 words in capitals that succinctly describes the data contained in the column. . credit_df.rename(columns={&#39;PAY_0&#39;:&#39;PAY_1&#39;},inplace=True) . credit_df.columns[6] # check . &#39;PAY_1&#39; . credit_df.rename(columns={&#39;default payment next month&#39;:&#39;DEFAULT&#39;},inplace=True) . credit_df.info() . &lt;class &#39;pandas.core.frame.DataFrame&#39;&gt; RangeIndex: 30000 entries, 0 to 29999 Data columns (total 25 columns): # Column Non-Null Count Dtype -- -- 0 ID 30000 non-null int64 1 LIMIT_BAL 30000 non-null int64 2 SEX 30000 non-null int64 3 EDUCATION 30000 non-null int64 4 MARRIAGE 30000 non-null int64 5 AGE 30000 non-null int64 6 PAY_1 30000 non-null int64 7 PAY_2 30000 non-null int64 8 PAY_3 30000 non-null int64 9 PAY_4 30000 non-null int64 10 PAY_5 30000 non-null int64 11 PAY_6 30000 non-null int64 12 BILL_AMT1 30000 non-null int64 13 BILL_AMT2 30000 non-null int64 14 BILL_AMT3 30000 non-null int64 15 BILL_AMT4 30000 non-null int64 16 BILL_AMT5 30000 non-null int64 17 BILL_AMT6 30000 non-null int64 18 PAY_AMT1 30000 non-null int64 19 PAY_AMT2 30000 non-null int64 20 PAY_AMT3 30000 non-null int64 21 PAY_AMT4 30000 non-null int64 22 PAY_AMT5 30000 non-null int64 23 PAY_AMT6 30000 non-null int64 24 DEFAULT 30000 non-null int64 dtypes: int64(25) memory usage: 5.7 MB . credit_df[credit_df[&#39;PAY_2&#39;] == 1] . ID LIMIT_BAL SEX EDUCATION MARRIAGE AGE PAY_0 PAY_2 PAY_3 PAY_4 ... BILL_AMT4 BILL_AMT5 BILL_AMT6 PAY_AMT1 PAY_AMT2 PAY_AMT3 PAY_AMT4 PAY_AMT5 PAY_AMT6 default payment next month . 891 892 | 400000 | 1 | 2 | 2 | 37 | 1 | 1 | 1 | 2 | ... | 12599 | 18599 | 12284 | 3019 | 5014 | 3 | 7040 | 2006 | 2005 | 0 | . 1966 1967 | 90000 | 1 | 2 | 1 | 29 | 1 | 1 | 1 | 0 | ... | 2442 | 48063 | 48186 | 3100 | 1000 | 770 | 48012 | 1756 | 1894 | 0 | . 5644 5645 | 500000 | 1 | 1 | 1 | 42 | 1 | 1 | 0 | 0 | ... | 163299 | 159110 | 135658 | 1054 | 177080 | 4425 | 5666 | 4825 | 100225 | 0 | . 6024 6025 | 210000 | 2 | 2 | 2 | 29 | 1 | 1 | -2 | -2 | ... | -1987 | 1697 | 4347 | 0 | 0 | 2000 | 4000 | 3000 | 5000 | 0 | . 6117 6118 | 80000 | 1 | 1 | 2 | 26 | 1 | 1 | -2 | -2 | ... | 0 | 0 | 0 | 5000 | 0 | 0 | 0 | 0 | 0 | 0 | . 6782 6783 | 500000 | 1 | 1 | 1 | 32 | 1 | 1 | 1 | 1 | ... | 64178 | 64992 | 50722 | 20000 | 20012 | 10036 | 15000 | 10000 | 50000 | 0 | . 8615 8616 | 270000 | 2 | 2 | 2 | 53 | 1 | 1 | -2 | -2 | ... | -4 | -19205 | 42418 | 2 | 2 | 6002 | 2 | 64446 | 5002 | 0 | . 9119 9120 | 50000 | 1 | 2 | 2 | 40 | 1 | 1 | -1 | -1 | ... | 29148 | 30270 | 22814 | 0 | 2931 | 30000 | 5270 | 2814 | 3089 | 0 | . 11012 11013 | 20000 | 2 | 2 | 2 | 45 | 1 | 1 | -1 | 0 | ... | 8005 | 3034 | 9287 | 700 | 21400 | 1005 | 3034 | 9287 | 85 | 0 | . 11497 11498 | 250000 | 1 | 1 | 1 | 42 | 1 | 1 | 1 | 1 | ... | 307354 | 285901 | 272322 | 15210 | 8273 | 8100 | 100 | 8942 | 254000 | 1 | . 11853 11854 | 360000 | 1 | 3 | 1 | 34 | 1 | 1 | -1 | -1 | ... | 22960 | 22960 | 0 | 0 | 361560 | 22960 | 0 | 0 | 0 | 0 | . 11990 11991 | 100000 | 2 | 2 | 1 | 27 | 1 | 1 | -1 | 0 | ... | 5386 | 1133 | 4143 | 2 | 9586 | 1014 | 500 | 3010 | 1 | 0 | . 12205 12206 | 240000 | 2 | 1 | 2 | 30 | 1 | 1 | -2 | -2 | ... | -1868 | -1868 | -1868 | 0 | 0 | 0 | 0 | 0 | 0 | 1 | . 14001 14002 | 500000 | 1 | 1 | 1 | 53 | 1 | 1 | -1 | 0 | ... | 2800 | 854 | 10854 | 0 | 7439 | 0 | 854 | 10000 | 13313 | 0 | . 14097 14098 | 50000 | 1 | 2 | 1 | 50 | 1 | 1 | -2 | -2 | ... | 0 | 0 | 0 | 5000 | 0 | 0 | 0 | 0 | 0 | 0 | . 14178 14179 | 90000 | 2 | 2 | 1 | 41 | 1 | 1 | -2 | -2 | ... | -2364 | -2364 | -2364 | 0 | 0 | 0 | 0 | 0 | 0 | 1 | . 18417 18418 | 110000 | 2 | 2 | 1 | 24 | 1 | 1 | -1 | 0 | ... | 66102 | 54275 | 51791 | 5 | 68500 | 3114 | 4016 | 2000 | 2000 | 0 | . 19139 19140 | 260000 | 2 | 2 | 1 | 37 | 1 | 1 | -2 | -2 | ... | -15910 | 24090 | 13977 | 0 | 0 | 0 | 40000 | 507 | 656 | 0 | . 19194 19195 | 380000 | 2 | 2 | 1 | 33 | 1 | 1 | 2 | 2 | ... | 354443 | 354765 | 354579 | 29540 | 74 | 14301 | 13000 | 12800 | 12800 | 0 | . 22326 22327 | 80000 | 2 | 2 | 2 | 24 | 1 | 1 | -1 | -1 | ... | 18150 | 7490 | 7490 | 10000 | 10000 | 18150 | 7490 | 7490 | 7490 | 0 | . 24239 24240 | 50000 | 1 | 2 | 2 | 30 | 1 | 1 | -1 | 2 | ... | 47832 | 46783 | 47890 | 125 | 52000 | 2000 | 0 | 2000 | 3700 | 0 | . 25175 25176 | 50000 | 2 | 2 | 1 | 22 | 1 | 1 | 2 | 2 | ... | 34644 | 28867 | 28983 | 7178 | 0 | 1656 | 944 | 967 | 1112 | 0 | . 25862 25863 | 70000 | 2 | 1 | 1 | 45 | 1 | 1 | -1 | 0 | ... | 68709 | 28528 | 29171 | 0 | 140043 | 1830 | 1021 | 1103 | 1011 | 0 | . 25873 25874 | 60000 | 2 | 2 | 3 | 39 | 1 | 1 | -2 | -2 | ... | -2320 | -1220 | 0 | 0 | 0 | 0 | 2000 | 2000 | 0 | 1 | . 26771 26772 | 180000 | 1 | 1 | 1 | 30 | 1 | 1 | -2 | -2 | ... | 0 | 0 | 0 | 10000 | 0 | 0 | 0 | 0 | 0 | 0 | . 26975 26976 | 180000 | 1 | 2 | 2 | 28 | 1 | 1 | -2 | -2 | ... | -46 | -46 | 1154 | 3000 | 0 | 0 | 0 | 1200 | 44338 | 0 | . 27937 27938 | 120000 | 2 | 2 | 2 | 27 | 1 | 1 | -2 | -2 | ... | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 1 | . 29411 29412 | 50000 | 1 | 3 | 1 | 31 | 1 | 1 | -2 | -2 | ... | 0 | 0 | 0 | 6000 | 0 | 0 | 0 | 0 | 0 | 0 | . 28 rows × 25 columns . talk about above From the data dictionary we already know that sex has the values 1 and 2 representing male and female. however to be binary we will change them to 0 and 1 respevtively. pd.replace . credit_df[&#39;SEX&#39;]=credit_df[&#39;SEX&#39;].replace({1: 0, 2: 1}) # actually don&#39;t need this if doing get_dummies . credit_df[&#39;SEX&#39;] . 0 2 1 2 2 2 3 2 4 1 .. 29995 1 29996 1 29997 1 29998 1 29999 1 Name: SEX, Length: 30000, dtype: int64 . credit_df[&#39;SEX&#39;].value_counts() . 2 18112 1 11888 Name: SEX, dtype: int64 . pd.get_dummies(credit_df[&#39;SEX&#39;],drop_first=True) . 2 . 0 1 | . 1 1 | . 2 1 | . 3 1 | . 4 0 | . ... ... | . 29995 0 | . 29996 0 | . 29997 0 | . 29998 0 | . 29999 0 | . 30000 rows × 1 columns . Lets focus on cleaning and checking for inconsistencies in the first half of the dataset. . len(credit_df.columns) . 25 . credit_df_pay_col=credit_df.columns[6:12] . for col in credit_df.columns[0:5]: plt.figure() plt.title(f&#39;Column: {col}&#39;) sns.histplot(credit_df[col], bins=40) plt.show() . first half observations . From the first half of the data set we can already see a lot of issues that need to be sorted before we can start modelling. . First lets look at education. From the data dictionary we already know there is 2 redundents value of 5 and 6. We already have 4 to denote unknown or other education status. We need to check if there is any other unknown values as well as how many values exaclty we are changing and if that affects the rest of the dataset&#39;s distribution. . secondly the graph shows us that the marriage graph seems to have an extra unknown value of 0. . credit_df[&#39;EDUCATION&#39;].value_counts() # another unknown value - 0,not mentioned in description . 2 14030 1 10585 3 4917 5 280 4 123 6 51 0 14 Name: EDUCATION, dtype: int64 . To sum up there are 3 unknown values: 0,5,6. We have the value 4 to refer to other either instituations or other unknown place of study. Upon doing some external reseach, I found that Taiwan has a very high percentage of education in general. In fact around 94.7% of people have passed high school and gone onto some sort of higher education or senior vocational course . Based on this information, it is safe to assume that the unknown values and other category can be grouped together in the value 3, as it is highly likely that these people have passed high school at very the least. Additionally since adding the 3 unknown values gives us 345 values which is just under 2% of the entire dataset it is almost insignificant. . credit_df[&#39;EDUCATION&#39;]=credit_df[&#39;EDUCATION&#39;].replace([0, 4,5,6], 3 ) . credit_df[&#39;EDUCATION&#39;].value_counts() # now do get dummies so we only have 2 columns left . 2 14030 1 10585 3 5385 Name: EDUCATION, dtype: int64 . credit_df[&#39;MARRIAGE&#39;].value_counts() . 2 15964 1 13659 3 323 0 54 Name: MARRIAGE, dtype: int64 . credit_df[&#39;MARRIAGE&#39;]=credit_df[&#39;MARRIAGE&#39;].replace(0,3) . credit_df[&#39;MARRIAGE&#39;].value_counts(normalize=True)*100 . 2 53.213333 1 45.530000 3 1.256667 Name: MARRIAGE, dtype: float64 . since 3 - others- only counts for 1.25% of the dataframe we can turn this column into binary?? using get dummies and get rid of the 3rd value. . credit_df[&#39;MARRIAGE&#39;].value_counts() . 2 15964 1 13659 3 377 Name: MARRIAGE, dtype: int64 . # Marriage, Age, and Sex def boxplot_variation(feature1, feature2, feature3, width=16): fig, ax1 = plt.subplots(ncols=1, figsize=(width, 6)) s = sns.boxplot(ax=ax1, x=feature1, y=feature2, hue=feature3, data=credit_df, palette=&#39;pastel&#39;) #s.set_xticklabels(s.get_xticklabels(), rotation=90) plt.show(); boxplot_variation(&#39;MARRIAGE&#39;, &#39;AGE&#39;, &#39;SEX&#39;,10) . pd.get_dummies(credit_df[&#39;MARRIAGE&#39;],prefix=&#39;ISMARRIED&#39;) . ISMARRIED_1 ISMARRIED_2 ISMARRIED_3 . 0 1 | 0 | 0 | . 1 0 | 1 | 0 | . 2 0 | 1 | 0 | . 3 1 | 0 | 0 | . 4 1 | 0 | 0 | . ... ... | ... | ... | . 29995 1 | 0 | 0 | . 29996 0 | 1 | 0 | . 29997 0 | 1 | 0 | . 29998 1 | 0 | 0 | . 29999 1 | 0 | 0 | . 30000 rows × 3 columns . for col in credit_df_pay_col: plt.figure() plt.title(f&#39;Column: {col}&#39;) sns.histplot(credit_df[col], bins=40) plt.yscale(&#39;log&#39;) plt.show() . credit_df2=credit_df.copy() . credit_df2.drop(ISMARRIED_3) . NameError Traceback (most recent call last) c: Users Robin Downloads capstone_project _notebooks 2022-07-01-eda.ipynb Cell 43 in &lt;cell line: 1&gt;() -&gt; &lt;a href=&#39;vscode-notebook-cell:/c%3A/Users/Robin/Downloads/capstone_project/_notebooks/2022-07-01-eda.ipynb#ch0000042?line=0&#39;&gt;1&lt;/a&gt; credit_df2.drop(ISMARRIED_3) NameError: name &#39;ISMARRIED_3&#39; is not defined . len(credit_df.columns) . 25 . for col in credit_df_pay_col: plt.figure() plt.title(f&#39;Feature: {col}&#39;) sns.histplot(credit_df[col],bins=30) plt. plt.show() . We can already see many inconsistencies in the data. . for col in credit_df.columns[12:25]: plt.figure() plt.title(f&#39;Feature: {col}&#39;) sns.histplot(credit_df[col],bins=30) plt.show() . #credit_df.iloc[:,12:25] from isort import place_module plt.figure(figsize=(10,7)) cmap = sns.diverging_palette(230, 20, as_cmap=True) sns.heatmap(credit_df.iloc[:,12:25].corr(),annot=True,cmap=cmap) . &lt;AxesSubplot:&gt; . credit_df[&#39;MARRIAGE&#39;].value_counts() . 2 15964 1 13659 3 377 Name: MARRIAGE, dtype: int64 . credit_df[&#39;SEX&#39;].value_counts() . 1 18112 0 11888 Name: SEX, dtype: int64 . The columns Sex need to be realigned as binary, 0 and 1 instead of the current 1 and 2. . The marriage status column also has an extra value of 0 which is not mentioned in the data description. We will group it together with the &#39;others&#39; value as we don&#39;t know what it stands for. . In addition the column can be one hot encoded so that we have a 1 less column than there are options i.e an IsMarried columns, encoded as 0/1 meaning married or not married, similarly an are they single column, encoded as 0/1 again single or not single, and anything which has 0 for both these columns is assumed to be others so there is no need to do another computation for a third column as others such as divorced is inferred.???? . actually no we can&#39;t because its married, single, or divorced/widowed etc | . sns.histplot(data=credit_df[&#39;AGE&#39;],bins=40,color=&#39;coral&#39;) plt.title(&#39;Distribution of Age&#39;) . Text(0.5, 1.0, &#39;Distribution of Age&#39;) . corr = credit_df.corr(method=&#39;spearman&#39;) mask = np.zeros_like(corr,dtype=bool) mask[np.triu_indices_from(mask)]=True cmap = sns.diverging_palette(230, 20, as_cmap=True) with sns.axes_style(&quot;white&quot;): plt.subplots(figsize=(18, 18)) sns.heatmap(corr, mask=mask, square=True, linewidths=.3, fmt=&#39;.2f&#39;, cmap=cmap, annot=True, annot_kws={&quot;size&quot;: 12}) plt.title(&#39;Correlation matrix (Spearman)&#39;, size=15) plt.show() #https://seaborn.pydata.org/examples/many_pairwise_correlations.html . . [&#39;PAY_1&#39;, &#39;PAY_2&#39;, &#39;PAY_3&#39;, &#39;PAY_4&#39;, &#39;PAY_5&#39;, &#39;PAY_6&#39;, &#39;PAY_AMT1&#39;, &#39;PAY_AMT2&#39;, &#39;PAY_AMT3&#39;, &#39;PAY_AMT4&#39;, &#39;PAY_AMT5&#39;, &#39;PAY_AMT6&#39;] . credit_df_pay_col=credit_df.columns[6:12] for col in credit_df_pay_col: credit_df = credit_df.replace([-1, -2], 0 ) credit_df[&#39;PAY_0&#39;].value_counts() for col in credit_df.columns[6:12]: print(credit_df[col].value_counts()) . target = credit_df[&#39;DEFAULT&#39;] predictors = credit_df.loc[:, credit_df.columns != &#39;DEFAULT&#39;] . from sklearn.model_selection import train_test_split X_train, X_test, y_train, y_test = train_test_split(predictors, target, test_size=0.2, random_state=10) . from sklearn.preprocessing import StandardScaler scaler = StandardScaler() X_train_scaled = scaler.fit_transform(X_train) X_test_scaled = scaler.transform(X_test) . from sklearn.linear_model import LogisticRegression from sklearn.metrics import accuracy_score,confusion_matrix,precision_score model1 = LogisticRegression() model1.fit(X_train_scaled, y_train) y_pred = model1.predict(X_test) #print(classification_report(y_pred, y_test)) print(confusion_matrix(y_pred, y_test)) print(&#39; nAccuracy Score for model1 test: &#39;, accuracy_score(y_pred,y_test)) . [[4680 1317] [ 3 0]] Accuracy Score for model1 test: 0.78 . c: Users Robin anaconda3 lib site-packages sklearn base.py:443: UserWarning: X has feature names, but LogisticRegression was fitted without feature names warnings.warn( . recall_score(y_test, y_pred) . 0.0 . model1.score(X_train_scaled,y_train) . 0.8097916666666667 . from sklearn.neighbors import KNeighborsClassifier knc = KNeighborsClassifier(n_neighbors=4) knc.fit(X_train_scaled,y_train) Y_pred_knc = knc.predict(X_test_scaled) accuracy_knc = accuracy_score(y_test,Y_pred_knc) accuracy_knc . 0.7988333333333333 . from sklearn.metrics import recall_score # recall_score(true labels, predicted labels) recall_score(y_test, Y_pred_knc) . 0.24297646165527714 . knc.score(X_train_scaled,y_train) . 0.8409583333333334 . print(confusion_matrix(Y_pred_knc, y_test)) . [[4319 873] [ 364 444]] . from sklearn.svm import LinearSVC SVM_model = LinearSVC() SVM_model.fit(X_train_scaled, y_train) Y_pred_svm = SVM_model.predict(X_test_scaled) print(f&quot;The TRAIN classification accuracy is: {SVM_model.score(X_train, y_train)}&quot;) . The TRAIN classification accuracy is: 0.7779166666666667 . c: Users Robin anaconda3 lib site-packages sklearn svm _base.py:1206: ConvergenceWarning: Liblinear failed to converge, increase the number of iterations. warnings.warn( c: Users Robin anaconda3 lib site-packages sklearn base.py:443: UserWarning: X has feature names, but LinearSVC was fitted without feature names warnings.warn( . recall_score(y_test, Y_pred_svm) . 0.16704631738800305 . accuracy_svm = accuracy_score(y_test,Y_pred_svm) . accuracy_svm . 0.8048333333333333 . print(confusion_matrix(Y_pred_svm, y_test)) . [[4606 1094] [ 77 223]] . credit_df[&#39;DEFAULT&#39;].value_counts() . 0 23364 1 6636 Name: DEFAULT, dtype: int64 .",
            "url": "https://apayal.github.io/capstone_project/2022/07/01/eda.html",
            "relUrl": "/2022/07/01/eda.html",
            "date": " • Jul 1, 2022"
        }
        
    
  
    
        ,"post2": {
            "title": "Fastpages Notebook Blog Post",
            "content": "About . This notebook is a demonstration of some of capabilities of fastpages with notebooks. . With fastpages you can save your jupyter notebooks into the _notebooks folder at the root of your repository, and they will be automatically be converted to Jekyll compliant blog posts! . Front Matter . The first cell in your Jupyter Notebook or markdown blog post contains front matter. Front matter is metadata that can turn on/off options in your Notebook. It is formatted like this: . # &quot;My Title&quot; &gt; &quot;Awesome summary&quot; - toc:true- branch: master - badges: true - comments: true - author: Hamel Husain &amp; Jeremy Howard - categories: [fastpages, jupyter] . Setting toc: true will automatically generate a table of contents | Setting badges: true will automatically include GitHub and Google Colab links to your notebook. | Setting comments: true will enable commenting on your blog post, powered by utterances. | . The title and description need to be enclosed in double quotes only if they include special characters such as a colon. More details and options for front matter can be viewed on the front matter section of the README. . Markdown Shortcuts . A #hide comment at the top of any code cell will hide both the input and output of that cell in your blog post. . A #hide_input comment at the top of any code cell will only hide the input of that cell. . The comment #hide_input was used to hide the code that produced this. . put a #collapse-hide flag at the top of any cell if you want to hide that cell by default, but give the reader the option to show it: . import pandas as pd import altair as alt . . put a #collapse-show flag at the top of any cell if you want to show that cell by default, but give the reader the option to hide it: . cars = &#39;https://vega.github.io/vega-datasets/data/cars.json&#39; movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; sp500 = &#39;https://vega.github.io/vega-datasets/data/sp500.csv&#39; stocks = &#39;https://vega.github.io/vega-datasets/data/stocks.csv&#39; flights = &#39;https://vega.github.io/vega-datasets/data/flights-5k.json&#39; . . place a #collapse-output flag at the top of any cell if you want to put the output under a collapsable element that is closed by default, but give the reader the option to open it: . print(&#39;The comment #collapse-output was used to collapse the output of this cell by default but you can expand it.&#39;) . The comment #collapse-output was used to collapse the output of this cell by default but you can expand it. . . Interactive Charts With Altair . Charts made with Altair remain interactive. Example charts taken from this repo, specifically this notebook. . Example 1: DropDown . # use specific hard-wired values as the initial selected values selection = alt.selection_single( name=&#39;Select&#39;, fields=[&#39;Major_Genre&#39;, &#39;MPAA_Rating&#39;], init={&#39;Major_Genre&#39;: &#39;Drama&#39;, &#39;MPAA_Rating&#39;: &#39;R&#39;}, bind={&#39;Major_Genre&#39;: alt.binding_select(options=genres), &#39;MPAA_Rating&#39;: alt.binding_radio(options=mpaa)} ) # scatter plot, modify opacity based on selection alt.Chart(df).mark_circle().add_selection( selection ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=&#39;IMDB_Rating:Q&#39;, tooltip=&#39;Title:N&#39;, opacity=alt.condition(selection, alt.value(0.75), alt.value(0.05)) ) . Example 2: Tooltips . alt.Chart(df).mark_circle().add_selection( alt.selection_interval(bind=&#39;scales&#39;, encodings=[&#39;x&#39;]) ).encode( alt.X(&#39;Rotten_Tomatoes_Rating&#39;, type=&#39;quantitative&#39;), alt.Y(&#39;IMDB_Rating&#39;, type=&#39;quantitative&#39;, axis=alt.Axis(minExtent=30)), # y=alt.Y(&#39;IMDB_Rating:Q&#39;, ), # use min extent to stabilize axis title placement tooltip=[&#39;Title:N&#39;, &#39;Release_Date:N&#39;, &#39;IMDB_Rating:Q&#39;, &#39;Rotten_Tomatoes_Rating:Q&#39;] ).properties( width=500, height=400 ) . Example 3: More Tooltips . label = alt.selection_single( encodings=[&#39;x&#39;], # limit selection to x-axis value on=&#39;mouseover&#39;, # select on mouseover events nearest=True, # select data point nearest the cursor empty=&#39;none&#39; # empty selection includes no data points ) # define our base line chart of stock prices base = alt.Chart().mark_line().encode( alt.X(&#39;date:T&#39;), alt.Y(&#39;price:Q&#39;, scale=alt.Scale(type=&#39;log&#39;)), alt.Color(&#39;symbol:N&#39;) ) alt.layer( base, # base line chart # add a rule mark to serve as a guide line alt.Chart().mark_rule(color=&#39;#aaa&#39;).encode( x=&#39;date:T&#39; ).transform_filter(label), # add circle marks for selected time points, hide unselected points base.mark_circle().encode( opacity=alt.condition(label, alt.value(1), alt.value(0)) ).add_selection(label), # add white stroked text to provide a legible background for labels base.mark_text(align=&#39;left&#39;, dx=5, dy=-5, stroke=&#39;white&#39;, strokeWidth=2).encode( text=&#39;price:Q&#39; ).transform_filter(label), # add text labels for stock prices base.mark_text(align=&#39;left&#39;, dx=5, dy=-5).encode( text=&#39;price:Q&#39; ).transform_filter(label), data=stocks ).properties( width=500, height=400 ) . Data Tables . You can display tables per the usual way in your blog: . df[[&#39;Title&#39;, &#39;Worldwide_Gross&#39;, &#39;Production_Budget&#39;, &#39;Distributor&#39;, &#39;MPAA_Rating&#39;, &#39;IMDB_Rating&#39;, &#39;Rotten_Tomatoes_Rating&#39;]].head() . Title Worldwide_Gross Production_Budget Distributor MPAA_Rating IMDB_Rating Rotten_Tomatoes_Rating . 0 The Land Girls | 146083.0 | 8000000.0 | Gramercy | R | 6.1 | NaN | . 1 First Love, Last Rites | 10876.0 | 300000.0 | Strand | R | 6.9 | NaN | . 2 I Married a Strange Person | 203134.0 | 250000.0 | Lionsgate | None | 6.8 | NaN | . 3 Let&#39;s Talk About Sex | 373615.0 | 300000.0 | Fine Line | None | NaN | 13.0 | . 4 Slam | 1087521.0 | 1000000.0 | Trimark | R | 3.4 | 62.0 | . Images . Local Images . You can reference local images and they will be copied and rendered on your blog automatically. You can include these with the following markdown syntax: . ![](my_icons/fastai_logo.png) . . Remote Images . Remote images can be included with the following markdown syntax: . ![](https://image.flaticon.com/icons/svg/36/36686.svg) . . Animated Gifs . Animated Gifs work, too! . ![](https://upload.wikimedia.org/wikipedia/commons/7/71/ChessPawnSpecialMoves.gif) . . Captions . You can include captions with markdown images like this: . ![](https://www.fast.ai/images/fastai_paper/show_batch.png &quot;Credit: https://www.fast.ai/2020/02/13/fastai-A-Layered-API-for-Deep-Learning/&quot;) . . Other Elements . GitHub Flavored Emojis . Typing I give this post two :+1:! will render this: . I give this post two :+1:! . Tweetcards . Typing &gt; twitter: https://twitter.com/jakevdp/status/1204765621767901185?s=20 will render this: Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 . Youtube Videos . Typing &gt; youtube: https://youtu.be/XfoYk_Z5AkI will render this: . Boxes / Callouts . Typing &gt; Warning: There will be no second warning! will render this: . Warning: There will be no second warning! . Typing &gt; Important: Pay attention! It&#39;s important. will render this: . Important: Pay attention! It&#8217;s important. . Typing &gt; Tip: This is my tip. will render this: . Tip: This is my tip. . Typing &gt; Note: Take note of this. will render this: . Note: Take note of this. . Typing &gt; Note: A doc link to [an example website: fast.ai](https://www.fast.ai/) should also work fine. will render in the docs: . Note: A doc link to an example website: fast.ai should also work fine. . Footnotes . You can have footnotes in notebooks, however the syntax is different compared to markdown documents. This guide provides more detail about this syntax, which looks like this: . For example, here is a footnote {% fn 1 %}. And another {% fn 2 %} {{ &#39;This is the footnote.&#39; | fndetail: 1 }} {{ &#39;This is the other footnote. You can even have a [link](www.github.com)!&#39; | fndetail: 2 }} . For example, here is a footnote 1. . And another 2 . 1. This is the footnote.↩ . 2. This is the other footnote. You can even have a link!↩ .",
            "url": "https://apayal.github.io/capstone_project/jupyter/2020/02/20/test.html",
            "relUrl": "/jupyter/2020/02/20/test.html",
            "date": " • Feb 20, 2020"
        }
        
    
  
    
        ,"post3": {
            "title": "An Example Markdown Post",
            "content": "Example Markdown Post . Basic setup . Jekyll requires blog post files to be named according to the following format: . YEAR-MONTH-DAY-filename.md . Where YEAR is a four-digit number, MONTH and DAY are both two-digit numbers, and filename is whatever file name you choose, to remind yourself what this post is about. .md is the file extension for markdown files. . The first line of the file should start with a single hash character, then a space, then your title. This is how you create a “level 1 heading” in markdown. Then you can create level 2, 3, etc headings as you wish but repeating the hash character, such as you see in the line ## File names above. . Basic formatting . You can use italics, bold, code font text, and create links. Here’s a footnote 1. Here’s a horizontal rule: . . Lists . Here’s a list: . item 1 | item 2 | . And a numbered list: . item 1 | item 2 | Boxes and stuff . This is a quotation . . You can include alert boxes …and… . . You can include info boxes Images . . Code . You can format text and code per usual . General preformatted text: . # Do a thing do_thing() . Python code and output: . # Prints &#39;2&#39; print(1+1) . 2 . Formatting text as shell commands: . echo &quot;hello world&quot; ./some_script.sh --option &quot;value&quot; wget https://example.com/cat_photo1.png . Formatting text as YAML: . key: value - another_key: &quot;another value&quot; . Tables . Column 1 Column 2 . A thing | Another thing | . Tweetcards . Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 Footnotes . This is the footnote. &#8617; . |",
            "url": "https://apayal.github.io/capstone_project/markdown/2020/01/14/test-markdown-post.html",
            "relUrl": "/markdown/2020/01/14/test-markdown-post.html",
            "date": " • Jan 14, 2020"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "This website is powered by fastpages 1. . a blogging platform that natively supports Jupyter notebooks in addition to other formats. &#8617; . |",
          "url": "https://apayal.github.io/capstone_project/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  
  

  
      ,"page10": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://apayal.github.io/capstone_project/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}